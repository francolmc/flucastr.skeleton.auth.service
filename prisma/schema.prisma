// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================
// AUTHENTICATION & AUTHORIZATION MODELS
// =================================

// User model - Basic user information for validation and authorization
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?  @unique
  firstName   String?
  lastName    String?
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)

  // Tenant information for multi-tenant support
  tenantId    String?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?

  // Relations
  userRoles   UserRole[]
  auditLogs   AuditLog[]

  // Indexes
  @@index([email])
  @@index([tenantId])
  @@index([isActive])
}

// Role model - RBAC roles
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  priority    Int      @default(0)     // Higher priority wins in conflicts

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  // Indexes
  @@index([name])
}

// Permission model - Individual permissions
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String   // e.g., "users", "posts", "admin"
  action      String   // e.g., "create", "read", "update", "delete"
  isSystem    Boolean  @default(false)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]

  // Indexes
  @@index([name])
  @@index([resource, action])
}

// User-Role relationship (Many-to-Many)
model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  // Timestamps
  assignedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  // Composite unique constraint
  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

// Role-Permission relationship (Many-to-Many)
model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  // Timestamps
  assignedAt DateTime @default(now())

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Composite unique constraint
  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// Audit log for authentication and authorization events
model AuditLog {
  id        String   @id @default(cuid())

  // Who performed the action
  userId    String?
  userEmail String?

  // What happened
  action    String   // e.g., "login", "token_validation", "permission_check"
  resource  String   // e.g., "users", "roles", "tokens"
  resourceId String?

  // Context
  ipAddress   String?
  userAgent   String?
  tenantId    String?
  sessionId   String?

  // Result
  success     Boolean  @default(true)
  errorMessage String?
  metadata    Json?    // Additional context data

  // Timestamps
  createdAt   DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([tenantId])
  @@index([success])
}

// =================================
// SYSTEM TABLES
// =================================

// System configuration for dynamic settings
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  isPublic    Boolean  @default(false)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Indexes
  @@index([key])
  @@index([isPublic])
}